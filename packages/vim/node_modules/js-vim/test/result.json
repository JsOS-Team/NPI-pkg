{
  "stats": {
    "suites": 138,
    "tests": 318,
    "passes": 318,
    "pending": 0,
    "failures": 0,
    "start": "2013-10-18T19:59:42.048Z",
    "end": "2013-10-18T19:59:42.864Z",
    "duration": 816
  },
  "tests": [
    {
      "title": "goes to next line",
      "fullTitle": "basic o goes to next line",
      "duration": 4
    },
    {
      "title": "enters insert mode",
      "fullTitle": "basic o enters insert mode",
      "duration": 5
    },
    {
      "title": "does not carry anything else over",
      "fullTitle": "basic o does not carry anything else over",
      "duration": 4
    },
    {
      "title": "removes the line",
      "fullTitle": "basic dd removes the line",
      "duration": 12
    },
    {
      "title": "removes an empty line",
      "fullTitle": "basic dd removes an empty line",
      "duration": 6
    },
    {
      "title": "goes to the next line even if the next is empty",
      "fullTitle": "basic dd goes to the next line even if the next is empty",
      "duration": 1
    },
    {
      "title": "out of smartindent, goes to the next line even if the current is empty",
      "fullTitle": "basic dd out of smartindent, goes to the next line even if the current is empty",
      "duration": 1
    },
    {
      "title": "in smartindent, goes to the next line even if the current is empty",
      "fullTitle": "basic dd in smartindent, goes to the next line even if the current is empty",
      "duration": 0
    },
    {
      "title": "<Ctrl-v> enters visual block mode",
      "fullTitle": "visual block <Ctrl-v> enters visual block mode",
      "duration": 1
    },
    {
      "title": "I allows inserting text to all lines",
      "fullTitle": "visual block I allows inserting text to all lines",
      "duration": 12
    },
    {
      "title": "I does not affect blocks it is not covering",
      "fullTitle": "visual block I does not affect blocks it is not covering",
      "duration": 9
    },
    {
      "title": "a carriage return inside an I insertion negates the visual block effect",
      "fullTitle": "visual block a carriage return inside an I insertion negates the visual block effect",
      "duration": 8
    },
    {
      "title": "A adds text to the end",
      "fullTitle": "visual block A adds text to the end",
      "duration": 6
    },
    {
      "title": "d removes selected text",
      "fullTitle": "visual block d removes selected text",
      "duration": 3
    },
    {
      "title": "c changes text then enters I mode",
      "fullTitle": "visual block c changes text then enters I mode",
      "duration": 9
    },
    {
      "title": "c handles text of various lengths",
      "fullTitle": "visual block c handles text of various lengths",
      "duration": 3
    },
    {
      "title": "$ selects the entirety of each line",
      "fullTitle": "visual block $ selects the entirety of each line",
      "duration": 5
    },
    {
      "title": "correctly highlights text when moving left",
      "fullTitle": "visual block correctly highlights text when moving left",
      "duration": 3
    },
    {
      "title": "erases the word",
      "fullTitle": "change x erases the word",
      "duration": 4
    },
    {
      "title": "saves the deletion in register",
      "fullTitle": "change x saves the deletion in register",
      "duration": 5
    },
    {
      "title": "works in obvious case",
      "fullTitle": "% works in obvious case",
      "duration": 3
    },
    {
      "title": "finds matching bracket",
      "fullTitle": "% finds matching bracket",
      "duration": 3
    },
    {
      "title": "finds deep nested",
      "fullTitle": "% finds deep nested",
      "duration": 6
    },
    {
      "title": "works for }",
      "fullTitle": "% works for }",
      "duration": 9
    },
    {
      "title": "works for (",
      "fullTitle": "% works for (",
      "duration": 8
    },
    {
      "title": "works for )",
      "fullTitle": "% works for )",
      "duration": 10
    },
    {
      "title": "doesnt barf on nothing",
      "fullTitle": "% doesnt barf on nothing",
      "duration": 1
    },
    {
      "title": "doesnt barf on unclosed",
      "fullTitle": "% doesnt barf on unclosed",
      "duration": 6
    },
    {
      "title": "does not return a character greater than the length of the line",
      "fullTitle": "cursor char does not return a character greater than the length of the line",
      "duration": 1
    },
    {
      "title": "remembers the furthest character it wants to be on",
      "fullTitle": "cursor char remembers the furthest character it wants to be on",
      "duration": 1
    },
    {
      "title": "returns an object with line, char",
      "fullTitle": "cursor position returns an object with line, char",
      "duration": 0
    },
    {
      "title": "erases character it is on",
      "fullTitle": "delete x erases character it is on",
      "duration": 2
    },
    {
      "title": "erases two characters if selection is first two",
      "fullTitle": "delete x erases two characters if selection is first two",
      "duration": 3
    },
    {
      "title": "erases every char if $h used",
      "fullTitle": "delete x erases every char if $h used",
      "duration": 4
    },
    {
      "title": "erases entire line if 0$ used",
      "fullTitle": "delete x erases entire line if 0$ used",
      "duration": 4
    },
    {
      "title": "accepts {n}x format",
      "fullTitle": "delete x accepts {n}x format",
      "duration": 5
    },
    {
      "title": "can erase multiple lines",
      "fullTitle": "delete x can erase multiple lines",
      "duration": 4
    },
    {
      "title": "erases two characters if selection is first two",
      "fullTitle": "delete d erases two characters if selection is first two",
      "duration": 3
    },
    {
      "title": "erases every char if $h used",
      "fullTitle": "delete d erases every char if $h used",
      "duration": 2
    },
    {
      "title": "erases entire line if 0$ used",
      "fullTitle": "delete d erases entire line if 0$ used",
      "duration": 1
    },
    {
      "title": "can erase multiple lines",
      "fullTitle": "delete d can erase multiple lines",
      "duration": 4
    },
    {
      "title": "erases an empty line",
      "fullTitle": "delete dd erases an empty line",
      "duration": 3
    },
    {
      "title": "deletes til the end",
      "fullTitle": "delete dG deletes til the end",
      "duration": 2
    },
    {
      "title": "exists",
      "fullTitle": "Doc.find exists",
      "duration": 0
    },
    {
      "title": "returns an object with line and char",
      "fullTitle": "Doc.find returns an object with line and char",
      "duration": 0
    },
    {
      "title": "retrieves the nearest match to the first capture of the passed regular expression",
      "fullTitle": "Doc.find retrieves the nearest match to the first capture of the passed regular expression",
      "duration": 0
    },
    {
      "title": "works backwards",
      "fullTitle": "Doc.find works backwards",
      "duration": 0
    },
    {
      "title": "works over lines",
      "fullTitle": "Doc.find works over lines",
      "duration": 0
    },
    {
      "title": "works backwards over lines",
      "fullTitle": "Doc.find works backwards over lines",
      "duration": 0
    },
    {
      "title": "accepts inclusive arg",
      "fullTitle": "Doc.find accepts inclusive arg",
      "duration": 0
    },
    {
      "title": "accepts $ in forward search",
      "fullTitle": "Doc.find accepts $ in forward search",
      "duration": 0
    },
    {
      "title": "accepts W in forward search",
      "fullTitle": "Doc.find accepts W in forward search",
      "duration": 0
    },
    {
      "title": "finds word end",
      "fullTitle": "Doc.find finds word end",
      "duration": 0
    },
    {
      "title": "does not identify current character as match if inclusive: false",
      "fullTitle": "Doc.find does not identify current character as match if inclusive: false",
      "duration": 0
    },
    {
      "title": "exists",
      "fullTitle": "Doc.remove exists",
      "duration": 0
    },
    {
      "title": "removes a range of text",
      "fullTitle": "Doc.remove removes a range of text",
      "duration": 0
    },
    {
      "title": "removes a special block range of text, essentially an array of ranges",
      "fullTitle": "Doc.remove removes a special block range of text, essentially an array of ranges",
      "duration": 0
    },
    {
      "title": "removing a character beyond the end of the line is the same as removing a carriage return",
      "fullTitle": "Doc.remove removing a character beyond the end of the line is the same as removing a carriage return",
      "duration": 0
    },
    {
      "title": "has cursor",
      "fullTitle": "Doc doc has cursor",
      "duration": 0
    },
    {
      "title": "returns the text of the doc",
      "fullTitle": "Doc doc.text returns the text of the doc",
      "duration": 0
    },
    {
      "title": "Sets the value if handed a string",
      "fullTitle": "Doc doc.text Sets the value if handed a string",
      "duration": 0
    },
    {
      "title": "Handed an array of two numbers. returns the contents bounded by those lines",
      "fullTitle": "Doc doc.text Handed an array of two numbers. returns the contents bounded by those lines",
      "duration": 0
    },
    {
      "title": "exists",
      "fullTitle": "Doc doc.insert exists",
      "duration": 0
    },
    {
      "title": "can insert a character",
      "fullTitle": "Doc doc.insert can insert a character",
      "duration": 0
    },
    {
      "title": "given multiple characters they are each inserted.",
      "fullTitle": "Doc doc.insert given multiple characters they are each inserted.",
      "duration": 0
    },
    {
      "title": "throws on bad range",
      "fullTitle": "Doc doc.remove throws on bad range",
      "duration": 0
    },
    {
      "title": "fires change event on text change",
      "fullTitle": "Doc doc.remove fires change event on text change",
      "duration": 0
    },
    {
      "title": "can remove a character",
      "fullTitle": "Doc doc.remove can remove a character",
      "duration": 0
    },
    {
      "title": "can remove more than one character",
      "fullTitle": "Doc doc.remove can remove more than one character",
      "duration": 0
    },
    {
      "title": "can remove across lines",
      "fullTitle": "Doc doc.remove can remove across lines",
      "duration": 0
    },
    {
      "title": "can delete a line",
      "fullTitle": "Doc doc.remove can delete a line",
      "duration": 0
    },
    {
      "title": "can remove, delete a line, and remove",
      "fullTitle": "Doc doc.remove can remove, delete a line, and remove",
      "duration": 0
    },
    {
      "title": "finds things",
      "fullTitle": "Doc doc.find finds things",
      "duration": 0
    },
    {
      "title": "works backwards",
      "fullTitle": "Doc doc.find works backwards",
      "duration": 0
    },
    {
      "title": "handles ^ backwards",
      "fullTitle": "Doc doc.find handles ^ backwards",
      "duration": 0
    },
    {
      "title": "exists",
      "fullTitle": "Doc doc.checkString exists",
      "duration": 0
    },
    {
      "title": "returns -1 when no match",
      "fullTitle": "Doc doc.checkString returns -1 when no match",
      "duration": 0
    },
    {
      "title": "returns 0 when found at zero",
      "fullTitle": "Doc doc.checkString returns 0 when found at zero",
      "duration": 0
    },
    {
      "title": "returns 1 when found at 1",
      "fullTitle": "Doc doc.checkString returns 1 when found at 1",
      "duration": 0
    },
    {
      "title": "returns null when present in line but not after offset",
      "fullTitle": "Doc doc.checkString returns null when present in line but not after offset",
      "duration": 0
    },
    {
      "title": "returns correct line when present in line before and after the offset",
      "fullTitle": "Doc doc.checkString returns correct line when present in line before and after the offset",
      "duration": 0
    },
    {
      "title": "returns correct line when present in line before and after the offset",
      "fullTitle": "Doc doc.checkString returns correct line when present in line before and after the offset",
      "duration": 0
    },
    {
      "title": "correctly does not treat the beginning of the offset string as the beginning of the line",
      "fullTitle": "Doc doc.checkString correctly does not treat the beginning of the offset string as the beginning of the line",
      "duration": 0
    },
    {
      "title": "can work backwards",
      "fullTitle": "Doc doc.checkString doc.checkString backwards can work backwards",
      "duration": 0
    },
    {
      "title": "ignores the a match that is after the offset",
      "fullTitle": "Doc doc.checkString doc.checkString backwards ignores the a match that is after the offset",
      "duration": 0
    },
    {
      "title": "returns a string value for the range if it is one line",
      "fullTitle": "Doc doc.getRange returns a string value for the range if it is one line",
      "duration": 0
    },
    {
      "title": "includes a carriage return if it is multiline",
      "fullTitle": "Doc doc.getRange includes a carriage return if it is multiline",
      "duration": 0
    },
    {
      "title": "adds a mark",
      "fullTitle": "Doc doc.addMark adds a mark",
      "duration": 0
    },
    {
      "title": "exists",
      "fullTitle": "parseRange exists",
      "duration": 0
    },
    {
      "title": "accepts % as all",
      "fullTitle": "parseRange accepts % as all",
      "duration": 1
    },
    {
      "title": "accepts empty string as current",
      "fullTitle": "parseRange accepts empty string as current",
      "duration": 0
    },
    {
      "title": "accepts . as current",
      "fullTitle": "parseRange accepts . as current",
      "duration": 0
    },
    {
      "title": "accepts number as that line number",
      "fullTitle": "parseRange accepts number as that line number",
      "duration": 0
    },
    {
      "title": "accepts $ as last",
      "fullTitle": "parseRange accepts $ as last",
      "duration": 0
    },
    {
      "title": "handles commas basically",
      "fullTitle": "parseRange handles commas basically",
      "duration": 0
    },
    {
      "title": "handles 1,$",
      "fullTitle": "parseRange handles 1,$",
      "duration": 0
    },
    {
      "title": "handles .,.+1",
      "fullTitle": "parseRange handles .,.+1",
      "duration": 0
    },
    {
      "title": "handles .-1,.+7",
      "fullTitle": "parseRange handles .-1,.+7",
      "duration": 0
    },
    {
      "title": "with no args does not throw",
      "fullTitle": "vim.exec with no args does not throw",
      "duration": 0
    },
    {
      "title": "has Doc property",
      "fullTitle": "vim has Doc property",
      "duration": 0
    },
    {
      "title": "exists",
      "fullTitle": "Cursor exists",
      "duration": 0
    },
    {
      "title": "fires change event on line change",
      "fullTitle": "Cursor fires change event on line change",
      "duration": 1
    },
    {
      "title": "fires change event on char change",
      "fullTitle": "Cursor fires change event on char change",
      "duration": 0
    },
    {
      "title": "has _line and _char",
      "fullTitle": "Cursor has _line and _char",
      "duration": 0
    },
    {
      "title": "sets and gets line",
      "fullTitle": "Cursor Cursor.line sets and gets line",
      "duration": 0
    },
    {
      "title": "sets and gets char",
      "fullTitle": "Cursor Cursor.char sets and gets char",
      "duration": 0
    },
    {
      "title": "exists",
      "fullTitle": "vim.exec exists",
      "duration": 0
    },
    {
      "title": "executes basic",
      "fullTitle": "vim.exec executes basic",
      "duration": 1
    },
    {
      "title": "moves to insert mode",
      "fullTitle": "modes command i moves to insert mode",
      "duration": 0
    },
    {
      "title": "moves to insert mode",
      "fullTitle": "modes command s moves to insert mode",
      "duration": 1
    },
    {
      "title": "moves to insert mode",
      "fullTitle": "modes command S moves to insert mode",
      "duration": 0
    },
    {
      "title": "moves the cursor left",
      "fullTitle": "modes command h moves the cursor left",
      "duration": 1
    },
    {
      "title": "stays at zero if already at zero",
      "fullTitle": "modes command h stays at zero if already at zero",
      "duration": 0
    },
    {
      "title": "moves the cursor right",
      "fullTitle": "modes command l moves the cursor right",
      "duration": 0
    },
    {
      "title": "stays at end of line if already there",
      "fullTitle": "modes command l stays at end of line if already there",
      "duration": 0
    },
    {
      "title": "moves the cursor down",
      "fullTitle": "modes command j moves the cursor down",
      "duration": 1
    },
    {
      "title": "stays at last line if already there",
      "fullTitle": "modes command j stays at last line if already there",
      "duration": 0
    },
    {
      "title": "moves the cursor up",
      "fullTitle": "modes command k moves the cursor up",
      "duration": 1
    },
    {
      "title": "stays at zero if already there",
      "fullTitle": "modes command k stays at zero if already there",
      "duration": 0
    },
    {
      "title": "does j multiple times",
      "fullTitle": "modes command {n}(h|j|k|l) does j multiple times",
      "duration": 0
    },
    {
      "title": "does l multiple times",
      "fullTitle": "modes command {n}(h|j|k|l) does l multiple times",
      "duration": 1
    },
    {
      "title": "moves to the end of the line",
      "fullTitle": "modes command $ moves to the end of the line",
      "duration": 0
    },
    {
      "title": "moves to the next word",
      "fullTitle": "modes command w moves to the next word",
      "duration": 2
    },
    {
      "title": "moves thence to the third",
      "fullTitle": "modes command w moves thence to the third",
      "duration": 1
    },
    {
      "title": "moves to line two when necessary",
      "fullTitle": "modes command w moves to line two when necessary",
      "duration": 2
    },
    {
      "title": "creates a new line under current line and moves to insert mode",
      "fullTitle": "modes command o creates a new line under current line and moves to insert mode",
      "duration": 1
    },
    {
      "title": "deletes the character",
      "fullTitle": "modes command x deletes the character",
      "duration": 1
    },
    {
      "title": "doesn't have a problem if the line is empty",
      "fullTitle": "modes command x doesn't have a problem if the line is empty"
    },
    {
      "title": "moves to the first non-blank character in the line",
      "fullTitle": "modes command ^ moves to the first non-blank character in the line",
      "duration": 1
    },
    {
      "title": "inserts text",
      "fullTitle": "modes insert inserts text",
      "duration": 1
    },
    {
      "title": "finds the next m",
      "fullTitle": "f{m} finds the next m",
      "duration": 1
    },
    {
      "title": "searches for the nth occurence of m",
      "fullTitle": "{n}f{m} searches for the nth occurence of m",
      "duration": 1
    },
    {
      "title": "looks for the phrase",
      "fullTitle": "search looks for the phrase",
      "duration": 1
    },
    {
      "title": "moves to the next instance",
      "fullTitle": "search moves to the next instance",
      "duration": 0
    },
    {
      "title": "is entered from command by pressing v",
      "fullTitle": "mode:visual is entered from command by pressing v",
      "duration": 1
    },
    {
      "title": "sets selection",
      "fullTitle": "mode:visual sets selection",
      "duration": 1
    },
    {
      "title": "accepts multiple motions without resetting",
      "fullTitle": "mode:visual accepts multiple motions without resetting",
      "duration": 2
    },
    {
      "title": "clears selection to cursor on esc",
      "fullTitle": "mode:visual clears selection to cursor on esc",
      "duration": 3
    },
    {
      "title": "performs yank when y hit in visual mode",
      "fullTitle": "mode:visual performs yank when y hit in visual mode",
      "duration": 3
    },
    {
      "title": "accepts return on empty file",
      "fullTitle": "motion, general accepts return on empty file",
      "duration": 1
    },
    {
      "title": "gets us to insert mode",
      "fullTitle": "insert i gets us to insert mode",
      "duration": 0
    },
    {
      "title": "adds that character",
      "fullTitle": "insert <char> adds that character",
      "duration": 1
    },
    {
      "title": "creates a new line",
      "fullTitle": "insert \\n creates a new line",
      "duration": 1
    },
    {
      "title": "can handle five characters including a newline",
      "fullTitle": "insert typing seems to work can handle five characters including a newline",
      "duration": 1
    },
    {
      "title": "does",
      "fullTitle": "y in visual mode should end up in command mode does",
      "duration": 2
    },
    {
      "title": "sets selection",
      "fullTitle": "#64: doc.selection(range) should set selection sets selection",
      "duration": 0
    },
    {
      "title": "sets position",
      "fullTitle": "#65: cursor.position should set position sets position",
      "duration": 0
    },
    {
      "title": "gets position",
      "fullTitle": "#66: cursor.col acts as setter / getter for column index gets position",
      "duration": 0
    },
    {
      "title": "gets position",
      "fullTitle": "#66: cursor.col acts as setter / getter for column index gets position",
      "duration": 0
    },
    {
      "title": "if space at end of line",
      "fullTitle": "#67: ve should select to the end of the word if space at end of line",
      "duration": 3
    },
    {
      "title": "if second word of three",
      "fullTitle": "#67: ve should select to the end of the word if second word of three",
      "duration": 2
    },
    {
      "title": "if only word on line",
      "fullTitle": "#67: ve should select to the end of the word if only word on line",
      "duration": 2
    },
    {
      "title": "records the keystrokes into the register",
      "fullTitle": "macro q records the keystrokes into the register",
      "duration": 3
    },
    {
      "title": "plays back the recorded keystrokes",
      "fullTitle": "macro @ plays back the recorded keystrokes",
      "duration": 5
    },
    {
      "title": "m[a-z] marks the bit.",
      "fullTitle": "marks m[a-z] marks the bit.",
      "duration": 1
    },
    {
      "title": "deleting over a mark removes it",
      "fullTitle": "marks deleting over a mark removes it",
      "duration": 4
    },
    {
      "title": "getting range doesnt change things",
      "fullTitle": "marks getting range doesnt change things",
      "duration": 0
    },
    {
      "title": "typing before a mark moves it forward",
      "fullTitle": "marks typing before a mark moves it forward",
      "duration": 4
    },
    {
      "title": "handles deletions in the line prior to the actual mark",
      "fullTitle": "marks handles deletions in the line prior to the actual mark",
      "duration": 4
    },
    {
      "title": "handles a join",
      "fullTitle": "marks handles a join",
      "duration": 8
    },
    {
      "title": "handles moving the mark to a new line",
      "fullTitle": "marks handles moving the mark to a new line",
      "duration": 11
    },
    {
      "title": "'[a-z] moves to that line",
      "fullTitle": "marks '[a-z] moves to that line",
      "duration": 2
    },
    {
      "title": "'[a-z] moves to the beginning of that line",
      "fullTitle": "marks '[a-z] moves to the beginning of that line",
      "duration": 1
    },
    {
      "title": "'[a-z] moves to that line and character",
      "fullTitle": "marks '[a-z] moves to that line and character",
      "duration": 1
    },
    {
      "title": "is replaced by another mark of same name",
      "fullTitle": "marks is replaced by another mark of same name",
      "duration": 1
    },
    {
      "title": ". returns last edit position",
      "fullTitle": "special marks . returns last edit position",
      "duration": 2
    },
    {
      "title": "exists",
      "fullTitle": "mark exists",
      "duration": 0
    },
    {
      "title": "returns a stringy thing",
      "fullTitle": "mark returns a stringy thing",
      "duration": 0
    },
    {
      "title": "passing it a mark will yield that mark back",
      "fullTitle": "mark passing it a mark will yield that mark back",
      "duration": 0
    },
    {
      "title": "creating a substring will pass the mark correctly",
      "fullTitle": "mark creating a substring will pass the mark correctly",
      "duration": 0
    },
    {
      "title": "creating a concat that will retain its own marks",
      "fullTitle": "mark creating a concat that will retain its own marks",
      "duration": 0
    },
    {
      "title": "creating a concat that will absorb other marks",
      "fullTitle": "mark creating a concat that will absorb other marks",
      "duration": 0
    },
    {
      "title": "works for three layers",
      "fullTitle": "mark works for three layers",
      "duration": 0
    },
    {
      "title": "handles nonmarks",
      "fullTitle": "mark handles nonmarks",
      "duration": 1
    },
    {
      "title": "handles substringing itself",
      "fullTitle": "mark handles substringing itself",
      "duration": 0
    },
    {
      "title": "handles substring, new text, substring concat'd",
      "fullTitle": "mark handles substring, new text, substring concat'd",
      "duration": 0
    },
    {
      "title": "doesnt mind empty string starting things off",
      "fullTitle": "mark doesnt mind empty string starting things off",
      "duration": 0
    },
    {
      "title": "moves cursor ",
      "fullTitle": "parser fa moves cursor ",
      "duration": 0
    },
    {
      "title": "performs search {motion} {count} times",
      "fullTitle": "parser fa performs search {motion} {count} times",
      "duration": 1
    },
    {
      "title": "moves to next Word",
      "fullTitle": "parser W moves to next Word",
      "duration": 0
    },
    {
      "title": "checks for first word on the line",
      "fullTitle": "parser W checks for first word on the line",
      "duration": 0
    },
    {
      "title": "moves to the first non-whitespace character on a line",
      "fullTitle": "parser ^ moves to the first non-whitespace character on a line",
      "duration": 0
    },
    {
      "title": "lands on the first character if the first character is not whitespace",
      "fullTitle": "parser ^ lands on the first character if the first character is not whitespace",
      "duration": 0
    },
    {
      "title": "moves to the last non-whitespace character on the line",
      "fullTitle": "parser g_ moves to the last non-whitespace character on the line",
      "duration": 0
    },
    {
      "title": "goes to beginning of next sentence",
      "fullTitle": "parser ) goes to beginning of next sentence",
      "duration": 0
    },
    {
      "title": "goes to beginning of this sentence",
      "fullTitle": "parser ( goes to beginning of this sentence",
      "duration": 1
    },
    {
      "title": "it goes to the previous sentence if at beginning of one",
      "fullTitle": "parser ( it goes to the previous sentence if at beginning of one",
      "duration": 1
    },
    {
      "title": "goes to beginning of line if need be",
      "fullTitle": "parser ( goes to beginning of line if need be",
      "duration": 0
    },
    {
      "title": "handles sentences of multiple words",
      "fullTitle": "parser ( handles sentences of multiple words",
      "duration": 1
    },
    {
      "title": "handles ?",
      "fullTitle": "parser ( handles ?",
      "duration": 1
    },
    {
      "title": "handles !",
      "fullTitle": "parser ( handles !",
      "duration": 1
    },
    {
      "title": "exists",
      "fullTitle": "vim.notify exists",
      "duration": 0
    },
    {
      "title": "sets vim.view.status",
      "fullTitle": "vim.notify sets vim.view.status",
      "duration": 0
    },
    {
      "title": "switches the case",
      "fullTitle": "~ switches the case",
      "duration": 2
    },
    {
      "title": "does so in visual mode",
      "fullTitle": "~ does so in visual mode",
      "duration": 7
    },
    {
      "title": "works as ~ in visual",
      "fullTitle": "g~ works as ~ in visual",
      "duration": 8
    },
    {
      "title": "converts to lowercase",
      "fullTitle": "gu converts to lowercase",
      "duration": 8
    },
    {
      "title": "converts to uppercase",
      "fullTitle": "gU converts to uppercase",
      "duration": 6
    },
    {
      "title": "performs simple {motion} {count} times",
      "fullTitle": "parser {count}{motion} performs simple {motion} {count} times",
      "duration": 2
    },
    {
      "title": "performs search {motion} {count} times",
      "fullTitle": "parser {count}{motion} performs search {motion} {count} times",
      "duration": 1
    },
    {
      "title": "i enters insert mode",
      "fullTitle": "survive i enters insert mode",
      "duration": 0
    },
    {
      "title": "x deletes current character",
      "fullTitle": "survive x deletes current character",
      "duration": 3
    },
    {
      "title": "dd delete and copy current line",
      "fullTitle": "survive dd delete and copy current line",
      "duration": 14
    },
    {
      "title": "changes the selection to what is inside the nearest two quotation marks",
      "fullTitle": "vi\" changes the selection to what is inside the nearest two quotation marks",
      "duration": 6
    },
    {
      "title": "inserts the contents of the first register after the cursor",
      "fullTitle": "paste p inserts the contents of the first register after the cursor",
      "duration": 2
    },
    {
      "title": "inserts the contents of the first register at the cursor",
      "fullTitle": "paste P inserts the contents of the first register at the cursor",
      "duration": 1
    },
    {
      "title": "has an rc object",
      "fullTitle": "abbreviate has an rc object",
      "duration": 0
    },
    {
      "title": "fills out abbreviations on space",
      "fullTitle": "abbreviate fills out abbreviations on space",
      "duration": 4
    },
    {
      "title": "fills out abbreviation on enter",
      "fullTitle": "abbreviate fills out abbreviation on enter",
      "duration": 4
    },
    {
      "title": "fills out abbreviation on enter",
      "fullTitle": "abbreviate fills out abbreviation on enter",
      "duration": 3
    },
    {
      "title": "doesnt go if not all typed in same insert session",
      "fullTitle": "abbreviate doesnt go if not all typed in same insert session",
      "duration": 4
    },
    {
      "title": "adds that abbreviation",
      "fullTitle": ":abbreviate adds that abbreviation",
      "duration": 1
    },
    {
      "title": "has :ab as an alias",
      "fullTitle": ":abbreviate has :ab as an alias",
      "duration": 0
    },
    {
      "title": "handles multiple words in rhs",
      "fullTitle": ":abbreviate handles multiple words in rhs",
      "duration": 0
    },
    {
      "title": "exists",
      "fullTitle": "registers vim.register exists",
      "duration": 0
    },
    {
      "title": "sets a val if given two args",
      "fullTitle": "registers vim.register sets a val if given two args",
      "duration": 0
    },
    {
      "title": "returns an empty string for an empty register",
      "fullTitle": "registers vim.register returns an empty string for an empty register",
      "duration": 0
    },
    {
      "title": "returns the register for a nonempty register",
      "fullTitle": "registers vim.register returns the register for a nonempty register",
      "duration": 0
    },
    {
      "title": "returns the filename",
      "fullTitle": "registers vim.register % returns the filename",
      "duration": 0
    },
    {
      "title": "places the first line into the \"a\" register",
      "fullTitle": "registers \"ayy places the first line into the \"a\" register",
      "duration": 2
    },
    {
      "title": "puts the contents of register \"a\" after the cursor",
      "fullTitle": "registers \"ap puts the contents of register \"a\" after the cursor",
      "duration": 2
    },
    {
      "title": "retrieves the filename",
      "fullTitle": "registers \"% retrieves the filename",
      "duration": 4
    },
    {
      "title": "returns \"\" if no path specified",
      "fullTitle": "registers \"% returns \"\" if no path specified",
      "duration": 0
    },
    {
      "title": "returns \"\" if path is not a string",
      "fullTitle": "registers \"% returns \"\" if path is not a string",
      "duration": 0
    },
    {
      "title": "holds the last entered text",
      "fullTitle": "registers \". holds the last entered text",
      "duration": 2
    },
    {
      "title": "ignores a yank",
      "fullTitle": "registers \"_ ignores a yank",
      "duration": 3
    },
    {
      "title": "captures small deletes ( <= one line)",
      "fullTitle": "registers \"- captures small deletes ( <= one line)",
      "duration": 1
    },
    {
      "title": "works as pasting",
      "fullTitle": "registers \"- works as pasting",
      "duration": 3
    },
    {
      "title": "\"O\" not working correctly.",
      "fullTitle": "issues 37 \"O\" not working correctly.",
      "duration": 2
    },
    {
      "title": "can move cursor to the next word",
      "fullTitle": "search w can move cursor to the next word",
      "duration": 0
    },
    {
      "title": "catches words at beginning of line",
      "fullTitle": "search w catches words at beginning of line",
      "duration": 0
    },
    {
      "title": "distinguishes non-alpha characters as independent words",
      "fullTitle": "search w distinguishes non-alpha characters as independent words",
      "duration": 1
    },
    {
      "title": "moves cursor to the previous word",
      "fullTitle": "search b moves cursor to the previous word",
      "duration": 1
    },
    {
      "title": "moves cursor back two if called twice",
      "fullTitle": "search b moves cursor back two if called twice",
      "duration": 0
    },
    {
      "title": "searches from the \"a register",
      "fullTitle": "search /\"a searches from the \"a register",
      "duration": 0
    },
    {
      "title": "repeats last search",
      "fullTitle": "search /\\n repeats last search",
      "duration": 0
    },
    {
      "title": "repeats last backwards search",
      "fullTitle": "search ?\\n repeats last backwards search",
      "duration": 0
    },
    {
      "title": "is off if explicitly set off",
      "fullTitle": "smartindent is off if explicitly set off",
      "duration": 3
    },
    {
      "title": "does nothing if prevline does not end with {",
      "fullTitle": "smartindent does nothing if prevline does not end with {",
      "duration": 2
    },
    {
      "title": "does something if prevline does end with a {",
      "fullTitle": "smartindent does something if prevline does end with a {",
      "duration": 7
    },
    {
      "title": "only indents if that is the end of the line",
      "fullTitle": "smartindent only indents if that is the end of the line",
      "duration": 9
    },
    {
      "title": "indents if theres a comment afterwards in // form",
      "fullTitle": "smartindent indents if theres a comment afterwards in // form",
      "duration": 11
    },
    {
      "title": "indents if theres a complete comment afterwards in /* */ form",
      "fullTitle": "smartindent indents if theres a complete comment afterwards in /* */ form",
      "duration": 11
    },
    {
      "title": "indents twice",
      "fullTitle": "smartindent indents twice",
      "duration": 19
    },
    {
      "title": "deindents on a }",
      "fullTitle": "smartindent deindents on a }",
      "duration": 20
    },
    {
      "title": "leaves next line at same level if no action",
      "fullTitle": "smartindent leaves next line at same level if no action",
      "duration": 6
    },
    {
      "title": "substitutes one word at beginning of sentence",
      "fullTitle": "substitute substitutes one word at beginning of sentence",
      "duration": 4
    },
    {
      "title": "substitutes one word not at beginning of sentence",
      "fullTitle": "substitute substitutes one word not at beginning of sentence",
      "duration": 3
    },
    {
      "title": "does not encroach into other words or characters",
      "fullTitle": "substitute does not encroach into other words or characters",
      "duration": 3
    },
    {
      "title": "works with :s",
      "fullTitle": "substitute works with :s",
      "duration": 4
    },
    {
      "title": "Works locally",
      "fullTitle": "substitute Works locally",
      "duration": 3
    },
    {
      "title": "Handles extra slash",
      "fullTitle": "substitute Handles extra slash",
      "duration": 4
    },
    {
      "title": "Handles no match",
      "fullTitle": "substitute Handles no match",
      "duration": 1
    },
    {
      "title": "Only does the one line",
      "fullTitle": "substitute Only does the one line",
      "duration": 4
    },
    {
      "title": "Works globally",
      "fullTitle": "substitute Works globally",
      "duration": 8
    },
    {
      "title": ":s works with %",
      "fullTitle": "substitute :s works with %",
      "duration": 9
    },
    {
      "title": "Substitute works with %",
      "fullTitle": "substitute Substitute works with %",
      "duration": 12
    },
    {
      "title": "Works with simple range",
      "fullTitle": "substitute Works with simple range",
      "duration": 9
    },
    {
      "title": "Works with $ range",
      "fullTitle": "substitute Works with $ range",
      "duration": 7
    },
    {
      "title": "Works with N,$ range",
      "fullTitle": "substitute Works with N,$ range",
      "duration": 21
    },
    {
      "title": "returns an object",
      "fullTitle": "Vim.toJSON() returns an object",
      "duration": 0
    },
    {
      "title": "has mode as text",
      "fullTitle": "Vim.toJSON() has mode as text",
      "duration": 1
    },
    {
      "title": "has text as text",
      "fullTitle": "Vim.toJSON() has text as text",
      "duration": 0
    },
    {
      "title": "returns docs text",
      "fullTitle": "Vim.toJSON() returns docs text",
      "duration": 1
    },
    {
      "title": "has a cursor",
      "fullTitle": "Vim.toJSON() has a cursor",
      "duration": 0
    },
    {
      "title": "has a selection",
      "fullTitle": "Vim.toJSON() has a selection",
      "duration": 0
    },
    {
      "title": "will delete a general insertion",
      "fullTitle": "undo will delete a general insertion",
      "duration": 6
    },
    {
      "title": "will erase two general insertions if triggered twice",
      "fullTitle": "undo will erase two general insertions if triggered twice",
      "duration": 2
    },
    {
      "title": "will reverse a single x deletion",
      "fullTitle": "undo will reverse a single x deletion",
      "duration": 3
    },
    {
      "title": "will reverse 2x",
      "fullTitle": "undo will reverse 2x",
      "duration": 6
    },
    {
      "title": "moves cursor to where it was at beginning of undone write",
      "fullTitle": "undo moves cursor to where it was at beginning of undone write",
      "duration": 5
    },
    {
      "title": "moves cursor to where it was at beginning of undone write",
      "fullTitle": "undo moves cursor to where it was at beginning of undone write",
      "duration": 5
    },
    {
      "title": "exists",
      "fullTitle": "undo exists",
      "duration": 0
    },
    {
      "title": "is array",
      "fullTitle": "undo _history is array",
      "duration": 0
    },
    {
      "title": "is zero",
      "fullTitle": "undo position is zero",
      "duration": 0
    },
    {
      "title": "increments position",
      "fullTitle": "undo add increments position",
      "duration": 0
    },
    {
      "title": "adds first argument to _history",
      "fullTitle": "undo add adds first argument to _history",
      "duration": 0
    },
    {
      "title": "retrieves a specific state and sets the position to that index",
      "fullTitle": "undo get retrieves a specific state and sets the position to that index",
      "duration": 0
    },
    {
      "title": "retrieves the previous state",
      "fullTitle": "undo last retrieves the previous state",
      "duration": 0
    },
    {
      "title": "retrieves the next state",
      "fullTitle": "undo next retrieves the next state",
      "duration": 0
    },
    {
      "title": "exists",
      "fullTitle": "view exists",
      "duration": 0
    },
    {
      "title": "has on and trigger methods",
      "fullTitle": "view has on and trigger methods",
      "duration": 0
    },
    {
      "title": "has on and trigger methods",
      "fullTitle": "view has on and trigger methods",
      "duration": 0
    },
    {
      "title": "defaults to 24 lines, 80 columns",
      "fullTitle": "view defaults to 24 lines, 80 columns",
      "duration": 0
    },
    {
      "title": "triggers change on vim.change",
      "fullTitle": "view triggers change on vim.change",
      "duration": 0
    },
    {
      "title": "reads \"-- INSERT --\" if in insert mode",
      "fullTitle": "view status reads \"-- INSERT --\" if in insert mode",
      "duration": 0
    },
    {
      "title": "reads \"\" if in command mode with an empty buffer",
      "fullTitle": "view status reads \"\" if in command mode with an empty buffer",
      "duration": 0
    },
    {
      "title": "reads \":\" if : pressed",
      "fullTitle": "view status reads \":\" if : pressed",
      "duration": 0
    },
    {
      "title": "reads \"/\" if : pressed",
      "fullTitle": "view status reads \"/\" if : pressed",
      "duration": 1
    },
    {
      "title": "reads \"?\" if : pressed",
      "fullTitle": "view status reads \"?\" if : pressed",
      "duration": 0
    },
    {
      "title": "returns a string",
      "fullTitle": "view getText returns a string",
      "duration": 0
    },
    {
      "title": "includes status if there is one",
      "fullTitle": "view getText includes status if there is one",
      "duration": 0
    },
    {
      "title": "returns a string with view.lines lines",
      "fullTitle": "view getText returns a string with view.lines lines",
      "duration": 0
    },
    {
      "title": "Runs a gutter with 7 characters by default",
      "fullTitle": "view getText Runs a gutter with 7 characters by default",
      "duration": 1
    },
    {
      "title": "returns an array of view.lines length",
      "fullTitle": "view getArray returns an array of view.lines length",
      "duration": 0
    },
    {
      "title": "returns an empty array if identical",
      "fullTitle": "view diffLine returns an empty array if identical",
      "duration": 0
    },
    {
      "title": "returns an array with length > 0 if not",
      "fullTitle": "view diffLine returns an array with length > 0 if not",
      "duration": 0
    },
    {
      "title": "an individual diff has contents that equal what the new characters should be",
      "fullTitle": "view diffLine an individual diff has contents that equal what the new characters should be",
      "duration": 0
    },
    {
      "title": "There can be multiple diffs within one line",
      "fullTitle": "view diffLine There can be multiple diffs within one line",
      "duration": 0
    },
    {
      "title": "exists",
      "fullTitle": "vim exists",
      "duration": 0
    },
    {
      "title": "exists",
      "fullTitle": "vim .curChar exists",
      "duration": 2
    },
    {
      "title": "exists",
      "fullTitle": "vim .curWord exists",
      "duration": 0
    },
    {
      "title": "handles asdf",
      "fullTitle": "vim .curWord handles asdf",
      "duration": 1
    },
    {
      "title": "handles asdf fdsa",
      "fullTitle": "vim .curWord handles asdf fdsa",
      "duration": 3
    },
    {
      "title": "handles asdf q[w]er fdsa",
      "fullTitle": "vim .curWord handles asdf q[w]er fdsa",
      "duration": 7
    },
    {
      "title": "handles asdf [q]wer fdsa",
      "fullTitle": "vim .curWord handles asdf [q]wer fdsa",
      "duration": 6
    },
    {
      "title": "handles words in insert mode",
      "fullTitle": "vim .curWord handles words in insert mode",
      "duration": 1
    },
    {
      "title": "starts in visual",
      "fullTitle": "visual operators starts in visual",
      "duration": 0
    },
    {
      "title": "selects text correctly when moving backwards",
      "fullTitle": "visual operators selects text correctly when moving backwards",
      "duration": 1
    },
    {
      "title": "stores the selection in register 0",
      "fullTitle": "visual operators y stores the selection in register 0",
      "duration": 1
    },
    {
      "title": "deletes the selection",
      "fullTitle": "visual operators d deletes the selection",
      "duration": 1
    },
    {
      "title": "ends up in insert mode",
      "fullTitle": "visual operators c ends up in insert mode",
      "duration": 1
    },
    {
      "title": "indents all the selected lines",
      "fullTitle": "visual operators > indents all the selected lines",
      "duration": 5
    },
    {
      "title": "returns to the beginning of the selection after selecting.",
      "fullTitle": "yank returns to the beginning of the selection after selecting.",
      "duration": 2
    },
    {
      "title": "clears selection",
      "fullTitle": "yank clears selection",
      "duration": 2
    },
    {
      "title": "stores the contents of the line in the register",
      "fullTitle": "yank 0v$y stores the contents of the line in the register",
      "duration": 2
    },
    {
      "title": "stores the contents of the two lines in the register",
      "fullTitle": "yank 0vj$y stores the contents of the two lines in the register",
      "duration": 2
    },
    {
      "title": "grabs an array",
      "fullTitle": "yank yy grabs an array",
      "duration": 1
    }
  ],
  "failures": [],
  "passes": [
    {
      "title": "goes to next line",
      "fullTitle": "basic o goes to next line",
      "duration": 4
    },
    {
      "title": "enters insert mode",
      "fullTitle": "basic o enters insert mode",
      "duration": 5
    },
    {
      "title": "does not carry anything else over",
      "fullTitle": "basic o does not carry anything else over",
      "duration": 4
    },
    {
      "title": "removes the line",
      "fullTitle": "basic dd removes the line",
      "duration": 12
    },
    {
      "title": "removes an empty line",
      "fullTitle": "basic dd removes an empty line",
      "duration": 6
    },
    {
      "title": "goes to the next line even if the next is empty",
      "fullTitle": "basic dd goes to the next line even if the next is empty",
      "duration": 1
    },
    {
      "title": "out of smartindent, goes to the next line even if the current is empty",
      "fullTitle": "basic dd out of smartindent, goes to the next line even if the current is empty",
      "duration": 1
    },
    {
      "title": "in smartindent, goes to the next line even if the current is empty",
      "fullTitle": "basic dd in smartindent, goes to the next line even if the current is empty",
      "duration": 0
    },
    {
      "title": "<Ctrl-v> enters visual block mode",
      "fullTitle": "visual block <Ctrl-v> enters visual block mode",
      "duration": 1
    },
    {
      "title": "I allows inserting text to all lines",
      "fullTitle": "visual block I allows inserting text to all lines",
      "duration": 12
    },
    {
      "title": "I does not affect blocks it is not covering",
      "fullTitle": "visual block I does not affect blocks it is not covering",
      "duration": 9
    },
    {
      "title": "a carriage return inside an I insertion negates the visual block effect",
      "fullTitle": "visual block a carriage return inside an I insertion negates the visual block effect",
      "duration": 8
    },
    {
      "title": "A adds text to the end",
      "fullTitle": "visual block A adds text to the end",
      "duration": 6
    },
    {
      "title": "d removes selected text",
      "fullTitle": "visual block d removes selected text",
      "duration": 3
    },
    {
      "title": "c changes text then enters I mode",
      "fullTitle": "visual block c changes text then enters I mode",
      "duration": 9
    },
    {
      "title": "c handles text of various lengths",
      "fullTitle": "visual block c handles text of various lengths",
      "duration": 3
    },
    {
      "title": "$ selects the entirety of each line",
      "fullTitle": "visual block $ selects the entirety of each line",
      "duration": 5
    },
    {
      "title": "correctly highlights text when moving left",
      "fullTitle": "visual block correctly highlights text when moving left",
      "duration": 3
    },
    {
      "title": "erases the word",
      "fullTitle": "change x erases the word",
      "duration": 4
    },
    {
      "title": "saves the deletion in register",
      "fullTitle": "change x saves the deletion in register",
      "duration": 5
    },
    {
      "title": "works in obvious case",
      "fullTitle": "% works in obvious case",
      "duration": 3
    },
    {
      "title": "finds matching bracket",
      "fullTitle": "% finds matching bracket",
      "duration": 3
    },
    {
      "title": "finds deep nested",
      "fullTitle": "% finds deep nested",
      "duration": 6
    },
    {
      "title": "works for }",
      "fullTitle": "% works for }",
      "duration": 9
    },
    {
      "title": "works for (",
      "fullTitle": "% works for (",
      "duration": 8
    },
    {
      "title": "works for )",
      "fullTitle": "% works for )",
      "duration": 10
    },
    {
      "title": "doesnt barf on nothing",
      "fullTitle": "% doesnt barf on nothing",
      "duration": 1
    },
    {
      "title": "doesnt barf on unclosed",
      "fullTitle": "% doesnt barf on unclosed",
      "duration": 6
    },
    {
      "title": "does not return a character greater than the length of the line",
      "fullTitle": "cursor char does not return a character greater than the length of the line",
      "duration": 1
    },
    {
      "title": "remembers the furthest character it wants to be on",
      "fullTitle": "cursor char remembers the furthest character it wants to be on",
      "duration": 1
    },
    {
      "title": "returns an object with line, char",
      "fullTitle": "cursor position returns an object with line, char",
      "duration": 0
    },
    {
      "title": "erases character it is on",
      "fullTitle": "delete x erases character it is on",
      "duration": 2
    },
    {
      "title": "erases two characters if selection is first two",
      "fullTitle": "delete x erases two characters if selection is first two",
      "duration": 3
    },
    {
      "title": "erases every char if $h used",
      "fullTitle": "delete x erases every char if $h used",
      "duration": 4
    },
    {
      "title": "erases entire line if 0$ used",
      "fullTitle": "delete x erases entire line if 0$ used",
      "duration": 4
    },
    {
      "title": "accepts {n}x format",
      "fullTitle": "delete x accepts {n}x format",
      "duration": 5
    },
    {
      "title": "can erase multiple lines",
      "fullTitle": "delete x can erase multiple lines",
      "duration": 4
    },
    {
      "title": "erases two characters if selection is first two",
      "fullTitle": "delete d erases two characters if selection is first two",
      "duration": 3
    },
    {
      "title": "erases every char if $h used",
      "fullTitle": "delete d erases every char if $h used",
      "duration": 2
    },
    {
      "title": "erases entire line if 0$ used",
      "fullTitle": "delete d erases entire line if 0$ used",
      "duration": 1
    },
    {
      "title": "can erase multiple lines",
      "fullTitle": "delete d can erase multiple lines",
      "duration": 4
    },
    {
      "title": "erases an empty line",
      "fullTitle": "delete dd erases an empty line",
      "duration": 3
    },
    {
      "title": "deletes til the end",
      "fullTitle": "delete dG deletes til the end",
      "duration": 2
    },
    {
      "title": "exists",
      "fullTitle": "Doc.find exists",
      "duration": 0
    },
    {
      "title": "returns an object with line and char",
      "fullTitle": "Doc.find returns an object with line and char",
      "duration": 0
    },
    {
      "title": "retrieves the nearest match to the first capture of the passed regular expression",
      "fullTitle": "Doc.find retrieves the nearest match to the first capture of the passed regular expression",
      "duration": 0
    },
    {
      "title": "works backwards",
      "fullTitle": "Doc.find works backwards",
      "duration": 0
    },
    {
      "title": "works over lines",
      "fullTitle": "Doc.find works over lines",
      "duration": 0
    },
    {
      "title": "works backwards over lines",
      "fullTitle": "Doc.find works backwards over lines",
      "duration": 0
    },
    {
      "title": "accepts inclusive arg",
      "fullTitle": "Doc.find accepts inclusive arg",
      "duration": 0
    },
    {
      "title": "accepts $ in forward search",
      "fullTitle": "Doc.find accepts $ in forward search",
      "duration": 0
    },
    {
      "title": "accepts W in forward search",
      "fullTitle": "Doc.find accepts W in forward search",
      "duration": 0
    },
    {
      "title": "finds word end",
      "fullTitle": "Doc.find finds word end",
      "duration": 0
    },
    {
      "title": "does not identify current character as match if inclusive: false",
      "fullTitle": "Doc.find does not identify current character as match if inclusive: false",
      "duration": 0
    },
    {
      "title": "exists",
      "fullTitle": "Doc.remove exists",
      "duration": 0
    },
    {
      "title": "removes a range of text",
      "fullTitle": "Doc.remove removes a range of text",
      "duration": 0
    },
    {
      "title": "removes a special block range of text, essentially an array of ranges",
      "fullTitle": "Doc.remove removes a special block range of text, essentially an array of ranges",
      "duration": 0
    },
    {
      "title": "removing a character beyond the end of the line is the same as removing a carriage return",
      "fullTitle": "Doc.remove removing a character beyond the end of the line is the same as removing a carriage return",
      "duration": 0
    },
    {
      "title": "has cursor",
      "fullTitle": "Doc doc has cursor",
      "duration": 0
    },
    {
      "title": "returns the text of the doc",
      "fullTitle": "Doc doc.text returns the text of the doc",
      "duration": 0
    },
    {
      "title": "Sets the value if handed a string",
      "fullTitle": "Doc doc.text Sets the value if handed a string",
      "duration": 0
    },
    {
      "title": "Handed an array of two numbers. returns the contents bounded by those lines",
      "fullTitle": "Doc doc.text Handed an array of two numbers. returns the contents bounded by those lines",
      "duration": 0
    },
    {
      "title": "exists",
      "fullTitle": "Doc doc.insert exists",
      "duration": 0
    },
    {
      "title": "can insert a character",
      "fullTitle": "Doc doc.insert can insert a character",
      "duration": 0
    },
    {
      "title": "given multiple characters they are each inserted.",
      "fullTitle": "Doc doc.insert given multiple characters they are each inserted.",
      "duration": 0
    },
    {
      "title": "throws on bad range",
      "fullTitle": "Doc doc.remove throws on bad range",
      "duration": 0
    },
    {
      "title": "fires change event on text change",
      "fullTitle": "Doc doc.remove fires change event on text change",
      "duration": 0
    },
    {
      "title": "can remove a character",
      "fullTitle": "Doc doc.remove can remove a character",
      "duration": 0
    },
    {
      "title": "can remove more than one character",
      "fullTitle": "Doc doc.remove can remove more than one character",
      "duration": 0
    },
    {
      "title": "can remove across lines",
      "fullTitle": "Doc doc.remove can remove across lines",
      "duration": 0
    },
    {
      "title": "can delete a line",
      "fullTitle": "Doc doc.remove can delete a line",
      "duration": 0
    },
    {
      "title": "can remove, delete a line, and remove",
      "fullTitle": "Doc doc.remove can remove, delete a line, and remove",
      "duration": 0
    },
    {
      "title": "finds things",
      "fullTitle": "Doc doc.find finds things",
      "duration": 0
    },
    {
      "title": "works backwards",
      "fullTitle": "Doc doc.find works backwards",
      "duration": 0
    },
    {
      "title": "handles ^ backwards",
      "fullTitle": "Doc doc.find handles ^ backwards",
      "duration": 0
    },
    {
      "title": "exists",
      "fullTitle": "Doc doc.checkString exists",
      "duration": 0
    },
    {
      "title": "returns -1 when no match",
      "fullTitle": "Doc doc.checkString returns -1 when no match",
      "duration": 0
    },
    {
      "title": "returns 0 when found at zero",
      "fullTitle": "Doc doc.checkString returns 0 when found at zero",
      "duration": 0
    },
    {
      "title": "returns 1 when found at 1",
      "fullTitle": "Doc doc.checkString returns 1 when found at 1",
      "duration": 0
    },
    {
      "title": "returns null when present in line but not after offset",
      "fullTitle": "Doc doc.checkString returns null when present in line but not after offset",
      "duration": 0
    },
    {
      "title": "returns correct line when present in line before and after the offset",
      "fullTitle": "Doc doc.checkString returns correct line when present in line before and after the offset",
      "duration": 0
    },
    {
      "title": "returns correct line when present in line before and after the offset",
      "fullTitle": "Doc doc.checkString returns correct line when present in line before and after the offset",
      "duration": 0
    },
    {
      "title": "correctly does not treat the beginning of the offset string as the beginning of the line",
      "fullTitle": "Doc doc.checkString correctly does not treat the beginning of the offset string as the beginning of the line",
      "duration": 0
    },
    {
      "title": "can work backwards",
      "fullTitle": "Doc doc.checkString doc.checkString backwards can work backwards",
      "duration": 0
    },
    {
      "title": "ignores the a match that is after the offset",
      "fullTitle": "Doc doc.checkString doc.checkString backwards ignores the a match that is after the offset",
      "duration": 0
    },
    {
      "title": "returns a string value for the range if it is one line",
      "fullTitle": "Doc doc.getRange returns a string value for the range if it is one line",
      "duration": 0
    },
    {
      "title": "includes a carriage return if it is multiline",
      "fullTitle": "Doc doc.getRange includes a carriage return if it is multiline",
      "duration": 0
    },
    {
      "title": "adds a mark",
      "fullTitle": "Doc doc.addMark adds a mark",
      "duration": 0
    },
    {
      "title": "exists",
      "fullTitle": "parseRange exists",
      "duration": 0
    },
    {
      "title": "accepts % as all",
      "fullTitle": "parseRange accepts % as all",
      "duration": 1
    },
    {
      "title": "accepts empty string as current",
      "fullTitle": "parseRange accepts empty string as current",
      "duration": 0
    },
    {
      "title": "accepts . as current",
      "fullTitle": "parseRange accepts . as current",
      "duration": 0
    },
    {
      "title": "accepts number as that line number",
      "fullTitle": "parseRange accepts number as that line number",
      "duration": 0
    },
    {
      "title": "accepts $ as last",
      "fullTitle": "parseRange accepts $ as last",
      "duration": 0
    },
    {
      "title": "handles commas basically",
      "fullTitle": "parseRange handles commas basically",
      "duration": 0
    },
    {
      "title": "handles 1,$",
      "fullTitle": "parseRange handles 1,$",
      "duration": 0
    },
    {
      "title": "handles .,.+1",
      "fullTitle": "parseRange handles .,.+1",
      "duration": 0
    },
    {
      "title": "handles .-1,.+7",
      "fullTitle": "parseRange handles .-1,.+7",
      "duration": 0
    },
    {
      "title": "with no args does not throw",
      "fullTitle": "vim.exec with no args does not throw",
      "duration": 0
    },
    {
      "title": "has Doc property",
      "fullTitle": "vim has Doc property",
      "duration": 0
    },
    {
      "title": "exists",
      "fullTitle": "Cursor exists",
      "duration": 0
    },
    {
      "title": "fires change event on line change",
      "fullTitle": "Cursor fires change event on line change",
      "duration": 1
    },
    {
      "title": "fires change event on char change",
      "fullTitle": "Cursor fires change event on char change",
      "duration": 0
    },
    {
      "title": "has _line and _char",
      "fullTitle": "Cursor has _line and _char",
      "duration": 0
    },
    {
      "title": "sets and gets line",
      "fullTitle": "Cursor Cursor.line sets and gets line",
      "duration": 0
    },
    {
      "title": "sets and gets char",
      "fullTitle": "Cursor Cursor.char sets and gets char",
      "duration": 0
    },
    {
      "title": "exists",
      "fullTitle": "vim.exec exists",
      "duration": 0
    },
    {
      "title": "executes basic",
      "fullTitle": "vim.exec executes basic",
      "duration": 1
    },
    {
      "title": "moves to insert mode",
      "fullTitle": "modes command i moves to insert mode",
      "duration": 0
    },
    {
      "title": "moves to insert mode",
      "fullTitle": "modes command s moves to insert mode",
      "duration": 1
    },
    {
      "title": "moves to insert mode",
      "fullTitle": "modes command S moves to insert mode",
      "duration": 0
    },
    {
      "title": "moves the cursor left",
      "fullTitle": "modes command h moves the cursor left",
      "duration": 1
    },
    {
      "title": "stays at zero if already at zero",
      "fullTitle": "modes command h stays at zero if already at zero",
      "duration": 0
    },
    {
      "title": "moves the cursor right",
      "fullTitle": "modes command l moves the cursor right",
      "duration": 0
    },
    {
      "title": "stays at end of line if already there",
      "fullTitle": "modes command l stays at end of line if already there",
      "duration": 0
    },
    {
      "title": "moves the cursor down",
      "fullTitle": "modes command j moves the cursor down",
      "duration": 1
    },
    {
      "title": "stays at last line if already there",
      "fullTitle": "modes command j stays at last line if already there",
      "duration": 0
    },
    {
      "title": "moves the cursor up",
      "fullTitle": "modes command k moves the cursor up",
      "duration": 1
    },
    {
      "title": "stays at zero if already there",
      "fullTitle": "modes command k stays at zero if already there",
      "duration": 0
    },
    {
      "title": "does j multiple times",
      "fullTitle": "modes command {n}(h|j|k|l) does j multiple times",
      "duration": 0
    },
    {
      "title": "does l multiple times",
      "fullTitle": "modes command {n}(h|j|k|l) does l multiple times",
      "duration": 1
    },
    {
      "title": "moves to the end of the line",
      "fullTitle": "modes command $ moves to the end of the line",
      "duration": 0
    },
    {
      "title": "moves to the next word",
      "fullTitle": "modes command w moves to the next word",
      "duration": 2
    },
    {
      "title": "moves thence to the third",
      "fullTitle": "modes command w moves thence to the third",
      "duration": 1
    },
    {
      "title": "moves to line two when necessary",
      "fullTitle": "modes command w moves to line two when necessary",
      "duration": 2
    },
    {
      "title": "creates a new line under current line and moves to insert mode",
      "fullTitle": "modes command o creates a new line under current line and moves to insert mode",
      "duration": 1
    },
    {
      "title": "deletes the character",
      "fullTitle": "modes command x deletes the character",
      "duration": 1
    },
    {
      "title": "doesn't have a problem if the line is empty",
      "fullTitle": "modes command x doesn't have a problem if the line is empty"
    },
    {
      "title": "moves to the first non-blank character in the line",
      "fullTitle": "modes command ^ moves to the first non-blank character in the line",
      "duration": 1
    },
    {
      "title": "inserts text",
      "fullTitle": "modes insert inserts text",
      "duration": 1
    },
    {
      "title": "finds the next m",
      "fullTitle": "f{m} finds the next m",
      "duration": 1
    },
    {
      "title": "searches for the nth occurence of m",
      "fullTitle": "{n}f{m} searches for the nth occurence of m",
      "duration": 1
    },
    {
      "title": "looks for the phrase",
      "fullTitle": "search looks for the phrase",
      "duration": 1
    },
    {
      "title": "moves to the next instance",
      "fullTitle": "search moves to the next instance",
      "duration": 0
    },
    {
      "title": "is entered from command by pressing v",
      "fullTitle": "mode:visual is entered from command by pressing v",
      "duration": 1
    },
    {
      "title": "sets selection",
      "fullTitle": "mode:visual sets selection",
      "duration": 1
    },
    {
      "title": "accepts multiple motions without resetting",
      "fullTitle": "mode:visual accepts multiple motions without resetting",
      "duration": 2
    },
    {
      "title": "clears selection to cursor on esc",
      "fullTitle": "mode:visual clears selection to cursor on esc",
      "duration": 3
    },
    {
      "title": "performs yank when y hit in visual mode",
      "fullTitle": "mode:visual performs yank when y hit in visual mode",
      "duration": 3
    },
    {
      "title": "accepts return on empty file",
      "fullTitle": "motion, general accepts return on empty file",
      "duration": 1
    },
    {
      "title": "gets us to insert mode",
      "fullTitle": "insert i gets us to insert mode",
      "duration": 0
    },
    {
      "title": "adds that character",
      "fullTitle": "insert <char> adds that character",
      "duration": 1
    },
    {
      "title": "creates a new line",
      "fullTitle": "insert \\n creates a new line",
      "duration": 1
    },
    {
      "title": "can handle five characters including a newline",
      "fullTitle": "insert typing seems to work can handle five characters including a newline",
      "duration": 1
    },
    {
      "title": "does",
      "fullTitle": "y in visual mode should end up in command mode does",
      "duration": 2
    },
    {
      "title": "sets selection",
      "fullTitle": "#64: doc.selection(range) should set selection sets selection",
      "duration": 0
    },
    {
      "title": "sets position",
      "fullTitle": "#65: cursor.position should set position sets position",
      "duration": 0
    },
    {
      "title": "gets position",
      "fullTitle": "#66: cursor.col acts as setter / getter for column index gets position",
      "duration": 0
    },
    {
      "title": "gets position",
      "fullTitle": "#66: cursor.col acts as setter / getter for column index gets position",
      "duration": 0
    },
    {
      "title": "if space at end of line",
      "fullTitle": "#67: ve should select to the end of the word if space at end of line",
      "duration": 3
    },
    {
      "title": "if second word of three",
      "fullTitle": "#67: ve should select to the end of the word if second word of three",
      "duration": 2
    },
    {
      "title": "if only word on line",
      "fullTitle": "#67: ve should select to the end of the word if only word on line",
      "duration": 2
    },
    {
      "title": "records the keystrokes into the register",
      "fullTitle": "macro q records the keystrokes into the register",
      "duration": 3
    },
    {
      "title": "plays back the recorded keystrokes",
      "fullTitle": "macro @ plays back the recorded keystrokes",
      "duration": 5
    },
    {
      "title": "m[a-z] marks the bit.",
      "fullTitle": "marks m[a-z] marks the bit.",
      "duration": 1
    },
    {
      "title": "deleting over a mark removes it",
      "fullTitle": "marks deleting over a mark removes it",
      "duration": 4
    },
    {
      "title": "getting range doesnt change things",
      "fullTitle": "marks getting range doesnt change things",
      "duration": 0
    },
    {
      "title": "typing before a mark moves it forward",
      "fullTitle": "marks typing before a mark moves it forward",
      "duration": 4
    },
    {
      "title": "handles deletions in the line prior to the actual mark",
      "fullTitle": "marks handles deletions in the line prior to the actual mark",
      "duration": 4
    },
    {
      "title": "handles a join",
      "fullTitle": "marks handles a join",
      "duration": 8
    },
    {
      "title": "handles moving the mark to a new line",
      "fullTitle": "marks handles moving the mark to a new line",
      "duration": 11
    },
    {
      "title": "'[a-z] moves to that line",
      "fullTitle": "marks '[a-z] moves to that line",
      "duration": 2
    },
    {
      "title": "'[a-z] moves to the beginning of that line",
      "fullTitle": "marks '[a-z] moves to the beginning of that line",
      "duration": 1
    },
    {
      "title": "'[a-z] moves to that line and character",
      "fullTitle": "marks '[a-z] moves to that line and character",
      "duration": 1
    },
    {
      "title": "is replaced by another mark of same name",
      "fullTitle": "marks is replaced by another mark of same name",
      "duration": 1
    },
    {
      "title": ". returns last edit position",
      "fullTitle": "special marks . returns last edit position",
      "duration": 2
    },
    {
      "title": "exists",
      "fullTitle": "mark exists",
      "duration": 0
    },
    {
      "title": "returns a stringy thing",
      "fullTitle": "mark returns a stringy thing",
      "duration": 0
    },
    {
      "title": "passing it a mark will yield that mark back",
      "fullTitle": "mark passing it a mark will yield that mark back",
      "duration": 0
    },
    {
      "title": "creating a substring will pass the mark correctly",
      "fullTitle": "mark creating a substring will pass the mark correctly",
      "duration": 0
    },
    {
      "title": "creating a concat that will retain its own marks",
      "fullTitle": "mark creating a concat that will retain its own marks",
      "duration": 0
    },
    {
      "title": "creating a concat that will absorb other marks",
      "fullTitle": "mark creating a concat that will absorb other marks",
      "duration": 0
    },
    {
      "title": "works for three layers",
      "fullTitle": "mark works for three layers",
      "duration": 0
    },
    {
      "title": "handles nonmarks",
      "fullTitle": "mark handles nonmarks",
      "duration": 1
    },
    {
      "title": "handles substringing itself",
      "fullTitle": "mark handles substringing itself",
      "duration": 0
    },
    {
      "title": "handles substring, new text, substring concat'd",
      "fullTitle": "mark handles substring, new text, substring concat'd",
      "duration": 0
    },
    {
      "title": "doesnt mind empty string starting things off",
      "fullTitle": "mark doesnt mind empty string starting things off",
      "duration": 0
    },
    {
      "title": "moves cursor ",
      "fullTitle": "parser fa moves cursor ",
      "duration": 0
    },
    {
      "title": "performs search {motion} {count} times",
      "fullTitle": "parser fa performs search {motion} {count} times",
      "duration": 1
    },
    {
      "title": "moves to next Word",
      "fullTitle": "parser W moves to next Word",
      "duration": 0
    },
    {
      "title": "checks for first word on the line",
      "fullTitle": "parser W checks for first word on the line",
      "duration": 0
    },
    {
      "title": "moves to the first non-whitespace character on a line",
      "fullTitle": "parser ^ moves to the first non-whitespace character on a line",
      "duration": 0
    },
    {
      "title": "lands on the first character if the first character is not whitespace",
      "fullTitle": "parser ^ lands on the first character if the first character is not whitespace",
      "duration": 0
    },
    {
      "title": "moves to the last non-whitespace character on the line",
      "fullTitle": "parser g_ moves to the last non-whitespace character on the line",
      "duration": 0
    },
    {
      "title": "goes to beginning of next sentence",
      "fullTitle": "parser ) goes to beginning of next sentence",
      "duration": 0
    },
    {
      "title": "goes to beginning of this sentence",
      "fullTitle": "parser ( goes to beginning of this sentence",
      "duration": 1
    },
    {
      "title": "it goes to the previous sentence if at beginning of one",
      "fullTitle": "parser ( it goes to the previous sentence if at beginning of one",
      "duration": 1
    },
    {
      "title": "goes to beginning of line if need be",
      "fullTitle": "parser ( goes to beginning of line if need be",
      "duration": 0
    },
    {
      "title": "handles sentences of multiple words",
      "fullTitle": "parser ( handles sentences of multiple words",
      "duration": 1
    },
    {
      "title": "handles ?",
      "fullTitle": "parser ( handles ?",
      "duration": 1
    },
    {
      "title": "handles !",
      "fullTitle": "parser ( handles !",
      "duration": 1
    },
    {
      "title": "exists",
      "fullTitle": "vim.notify exists",
      "duration": 0
    },
    {
      "title": "sets vim.view.status",
      "fullTitle": "vim.notify sets vim.view.status",
      "duration": 0
    },
    {
      "title": "switches the case",
      "fullTitle": "~ switches the case",
      "duration": 2
    },
    {
      "title": "does so in visual mode",
      "fullTitle": "~ does so in visual mode",
      "duration": 7
    },
    {
      "title": "works as ~ in visual",
      "fullTitle": "g~ works as ~ in visual",
      "duration": 8
    },
    {
      "title": "converts to lowercase",
      "fullTitle": "gu converts to lowercase",
      "duration": 8
    },
    {
      "title": "converts to uppercase",
      "fullTitle": "gU converts to uppercase",
      "duration": 6
    },
    {
      "title": "performs simple {motion} {count} times",
      "fullTitle": "parser {count}{motion} performs simple {motion} {count} times",
      "duration": 2
    },
    {
      "title": "performs search {motion} {count} times",
      "fullTitle": "parser {count}{motion} performs search {motion} {count} times",
      "duration": 1
    },
    {
      "title": "i enters insert mode",
      "fullTitle": "survive i enters insert mode",
      "duration": 0
    },
    {
      "title": "x deletes current character",
      "fullTitle": "survive x deletes current character",
      "duration": 3
    },
    {
      "title": "dd delete and copy current line",
      "fullTitle": "survive dd delete and copy current line",
      "duration": 14
    },
    {
      "title": "changes the selection to what is inside the nearest two quotation marks",
      "fullTitle": "vi\" changes the selection to what is inside the nearest two quotation marks",
      "duration": 6
    },
    {
      "title": "inserts the contents of the first register after the cursor",
      "fullTitle": "paste p inserts the contents of the first register after the cursor",
      "duration": 2
    },
    {
      "title": "inserts the contents of the first register at the cursor",
      "fullTitle": "paste P inserts the contents of the first register at the cursor",
      "duration": 1
    },
    {
      "title": "has an rc object",
      "fullTitle": "abbreviate has an rc object",
      "duration": 0
    },
    {
      "title": "fills out abbreviations on space",
      "fullTitle": "abbreviate fills out abbreviations on space",
      "duration": 4
    },
    {
      "title": "fills out abbreviation on enter",
      "fullTitle": "abbreviate fills out abbreviation on enter",
      "duration": 4
    },
    {
      "title": "fills out abbreviation on enter",
      "fullTitle": "abbreviate fills out abbreviation on enter",
      "duration": 3
    },
    {
      "title": "doesnt go if not all typed in same insert session",
      "fullTitle": "abbreviate doesnt go if not all typed in same insert session",
      "duration": 4
    },
    {
      "title": "adds that abbreviation",
      "fullTitle": ":abbreviate adds that abbreviation",
      "duration": 1
    },
    {
      "title": "has :ab as an alias",
      "fullTitle": ":abbreviate has :ab as an alias",
      "duration": 0
    },
    {
      "title": "handles multiple words in rhs",
      "fullTitle": ":abbreviate handles multiple words in rhs",
      "duration": 0
    },
    {
      "title": "exists",
      "fullTitle": "registers vim.register exists",
      "duration": 0
    },
    {
      "title": "sets a val if given two args",
      "fullTitle": "registers vim.register sets a val if given two args",
      "duration": 0
    },
    {
      "title": "returns an empty string for an empty register",
      "fullTitle": "registers vim.register returns an empty string for an empty register",
      "duration": 0
    },
    {
      "title": "returns the register for a nonempty register",
      "fullTitle": "registers vim.register returns the register for a nonempty register",
      "duration": 0
    },
    {
      "title": "returns the filename",
      "fullTitle": "registers vim.register % returns the filename",
      "duration": 0
    },
    {
      "title": "places the first line into the \"a\" register",
      "fullTitle": "registers \"ayy places the first line into the \"a\" register",
      "duration": 2
    },
    {
      "title": "puts the contents of register \"a\" after the cursor",
      "fullTitle": "registers \"ap puts the contents of register \"a\" after the cursor",
      "duration": 2
    },
    {
      "title": "retrieves the filename",
      "fullTitle": "registers \"% retrieves the filename",
      "duration": 4
    },
    {
      "title": "returns \"\" if no path specified",
      "fullTitle": "registers \"% returns \"\" if no path specified",
      "duration": 0
    },
    {
      "title": "returns \"\" if path is not a string",
      "fullTitle": "registers \"% returns \"\" if path is not a string",
      "duration": 0
    },
    {
      "title": "holds the last entered text",
      "fullTitle": "registers \". holds the last entered text",
      "duration": 2
    },
    {
      "title": "ignores a yank",
      "fullTitle": "registers \"_ ignores a yank",
      "duration": 3
    },
    {
      "title": "captures small deletes ( <= one line)",
      "fullTitle": "registers \"- captures small deletes ( <= one line)",
      "duration": 1
    },
    {
      "title": "works as pasting",
      "fullTitle": "registers \"- works as pasting",
      "duration": 3
    },
    {
      "title": "\"O\" not working correctly.",
      "fullTitle": "issues 37 \"O\" not working correctly.",
      "duration": 2
    },
    {
      "title": "can move cursor to the next word",
      "fullTitle": "search w can move cursor to the next word",
      "duration": 0
    },
    {
      "title": "catches words at beginning of line",
      "fullTitle": "search w catches words at beginning of line",
      "duration": 0
    },
    {
      "title": "distinguishes non-alpha characters as independent words",
      "fullTitle": "search w distinguishes non-alpha characters as independent words",
      "duration": 1
    },
    {
      "title": "moves cursor to the previous word",
      "fullTitle": "search b moves cursor to the previous word",
      "duration": 1
    },
    {
      "title": "moves cursor back two if called twice",
      "fullTitle": "search b moves cursor back two if called twice",
      "duration": 0
    },
    {
      "title": "searches from the \"a register",
      "fullTitle": "search /\"a searches from the \"a register",
      "duration": 0
    },
    {
      "title": "repeats last search",
      "fullTitle": "search /\\n repeats last search",
      "duration": 0
    },
    {
      "title": "repeats last backwards search",
      "fullTitle": "search ?\\n repeats last backwards search",
      "duration": 0
    },
    {
      "title": "is off if explicitly set off",
      "fullTitle": "smartindent is off if explicitly set off",
      "duration": 3
    },
    {
      "title": "does nothing if prevline does not end with {",
      "fullTitle": "smartindent does nothing if prevline does not end with {",
      "duration": 2
    },
    {
      "title": "does something if prevline does end with a {",
      "fullTitle": "smartindent does something if prevline does end with a {",
      "duration": 7
    },
    {
      "title": "only indents if that is the end of the line",
      "fullTitle": "smartindent only indents if that is the end of the line",
      "duration": 9
    },
    {
      "title": "indents if theres a comment afterwards in // form",
      "fullTitle": "smartindent indents if theres a comment afterwards in // form",
      "duration": 11
    },
    {
      "title": "indents if theres a complete comment afterwards in /* */ form",
      "fullTitle": "smartindent indents if theres a complete comment afterwards in /* */ form",
      "duration": 11
    },
    {
      "title": "indents twice",
      "fullTitle": "smartindent indents twice",
      "duration": 19
    },
    {
      "title": "deindents on a }",
      "fullTitle": "smartindent deindents on a }",
      "duration": 20
    },
    {
      "title": "leaves next line at same level if no action",
      "fullTitle": "smartindent leaves next line at same level if no action",
      "duration": 6
    },
    {
      "title": "substitutes one word at beginning of sentence",
      "fullTitle": "substitute substitutes one word at beginning of sentence",
      "duration": 4
    },
    {
      "title": "substitutes one word not at beginning of sentence",
      "fullTitle": "substitute substitutes one word not at beginning of sentence",
      "duration": 3
    },
    {
      "title": "does not encroach into other words or characters",
      "fullTitle": "substitute does not encroach into other words or characters",
      "duration": 3
    },
    {
      "title": "works with :s",
      "fullTitle": "substitute works with :s",
      "duration": 4
    },
    {
      "title": "Works locally",
      "fullTitle": "substitute Works locally",
      "duration": 3
    },
    {
      "title": "Handles extra slash",
      "fullTitle": "substitute Handles extra slash",
      "duration": 4
    },
    {
      "title": "Handles no match",
      "fullTitle": "substitute Handles no match",
      "duration": 1
    },
    {
      "title": "Only does the one line",
      "fullTitle": "substitute Only does the one line",
      "duration": 4
    },
    {
      "title": "Works globally",
      "fullTitle": "substitute Works globally",
      "duration": 8
    },
    {
      "title": ":s works with %",
      "fullTitle": "substitute :s works with %",
      "duration": 9
    },
    {
      "title": "Substitute works with %",
      "fullTitle": "substitute Substitute works with %",
      "duration": 12
    },
    {
      "title": "Works with simple range",
      "fullTitle": "substitute Works with simple range",
      "duration": 9
    },
    {
      "title": "Works with $ range",
      "fullTitle": "substitute Works with $ range",
      "duration": 7
    },
    {
      "title": "Works with N,$ range",
      "fullTitle": "substitute Works with N,$ range",
      "duration": 21
    },
    {
      "title": "returns an object",
      "fullTitle": "Vim.toJSON() returns an object",
      "duration": 0
    },
    {
      "title": "has mode as text",
      "fullTitle": "Vim.toJSON() has mode as text",
      "duration": 1
    },
    {
      "title": "has text as text",
      "fullTitle": "Vim.toJSON() has text as text",
      "duration": 0
    },
    {
      "title": "returns docs text",
      "fullTitle": "Vim.toJSON() returns docs text",
      "duration": 1
    },
    {
      "title": "has a cursor",
      "fullTitle": "Vim.toJSON() has a cursor",
      "duration": 0
    },
    {
      "title": "has a selection",
      "fullTitle": "Vim.toJSON() has a selection",
      "duration": 0
    },
    {
      "title": "will delete a general insertion",
      "fullTitle": "undo will delete a general insertion",
      "duration": 6
    },
    {
      "title": "will erase two general insertions if triggered twice",
      "fullTitle": "undo will erase two general insertions if triggered twice",
      "duration": 2
    },
    {
      "title": "will reverse a single x deletion",
      "fullTitle": "undo will reverse a single x deletion",
      "duration": 3
    },
    {
      "title": "will reverse 2x",
      "fullTitle": "undo will reverse 2x",
      "duration": 6
    },
    {
      "title": "moves cursor to where it was at beginning of undone write",
      "fullTitle": "undo moves cursor to where it was at beginning of undone write",
      "duration": 5
    },
    {
      "title": "moves cursor to where it was at beginning of undone write",
      "fullTitle": "undo moves cursor to where it was at beginning of undone write",
      "duration": 5
    },
    {
      "title": "exists",
      "fullTitle": "undo exists",
      "duration": 0
    },
    {
      "title": "is array",
      "fullTitle": "undo _history is array",
      "duration": 0
    },
    {
      "title": "is zero",
      "fullTitle": "undo position is zero",
      "duration": 0
    },
    {
      "title": "increments position",
      "fullTitle": "undo add increments position",
      "duration": 0
    },
    {
      "title": "adds first argument to _history",
      "fullTitle": "undo add adds first argument to _history",
      "duration": 0
    },
    {
      "title": "retrieves a specific state and sets the position to that index",
      "fullTitle": "undo get retrieves a specific state and sets the position to that index",
      "duration": 0
    },
    {
      "title": "retrieves the previous state",
      "fullTitle": "undo last retrieves the previous state",
      "duration": 0
    },
    {
      "title": "retrieves the next state",
      "fullTitle": "undo next retrieves the next state",
      "duration": 0
    },
    {
      "title": "exists",
      "fullTitle": "view exists",
      "duration": 0
    },
    {
      "title": "has on and trigger methods",
      "fullTitle": "view has on and trigger methods",
      "duration": 0
    },
    {
      "title": "has on and trigger methods",
      "fullTitle": "view has on and trigger methods",
      "duration": 0
    },
    {
      "title": "defaults to 24 lines, 80 columns",
      "fullTitle": "view defaults to 24 lines, 80 columns",
      "duration": 0
    },
    {
      "title": "triggers change on vim.change",
      "fullTitle": "view triggers change on vim.change",
      "duration": 0
    },
    {
      "title": "reads \"-- INSERT --\" if in insert mode",
      "fullTitle": "view status reads \"-- INSERT --\" if in insert mode",
      "duration": 0
    },
    {
      "title": "reads \"\" if in command mode with an empty buffer",
      "fullTitle": "view status reads \"\" if in command mode with an empty buffer",
      "duration": 0
    },
    {
      "title": "reads \":\" if : pressed",
      "fullTitle": "view status reads \":\" if : pressed",
      "duration": 0
    },
    {
      "title": "reads \"/\" if : pressed",
      "fullTitle": "view status reads \"/\" if : pressed",
      "duration": 1
    },
    {
      "title": "reads \"?\" if : pressed",
      "fullTitle": "view status reads \"?\" if : pressed",
      "duration": 0
    },
    {
      "title": "returns a string",
      "fullTitle": "view getText returns a string",
      "duration": 0
    },
    {
      "title": "includes status if there is one",
      "fullTitle": "view getText includes status if there is one",
      "duration": 0
    },
    {
      "title": "returns a string with view.lines lines",
      "fullTitle": "view getText returns a string with view.lines lines",
      "duration": 0
    },
    {
      "title": "Runs a gutter with 7 characters by default",
      "fullTitle": "view getText Runs a gutter with 7 characters by default",
      "duration": 1
    },
    {
      "title": "returns an array of view.lines length",
      "fullTitle": "view getArray returns an array of view.lines length",
      "duration": 0
    },
    {
      "title": "returns an empty array if identical",
      "fullTitle": "view diffLine returns an empty array if identical",
      "duration": 0
    },
    {
      "title": "returns an array with length > 0 if not",
      "fullTitle": "view diffLine returns an array with length > 0 if not",
      "duration": 0
    },
    {
      "title": "an individual diff has contents that equal what the new characters should be",
      "fullTitle": "view diffLine an individual diff has contents that equal what the new characters should be",
      "duration": 0
    },
    {
      "title": "There can be multiple diffs within one line",
      "fullTitle": "view diffLine There can be multiple diffs within one line",
      "duration": 0
    },
    {
      "title": "exists",
      "fullTitle": "vim exists",
      "duration": 0
    },
    {
      "title": "exists",
      "fullTitle": "vim .curChar exists",
      "duration": 2
    },
    {
      "title": "exists",
      "fullTitle": "vim .curWord exists",
      "duration": 0
    },
    {
      "title": "handles asdf",
      "fullTitle": "vim .curWord handles asdf",
      "duration": 1
    },
    {
      "title": "handles asdf fdsa",
      "fullTitle": "vim .curWord handles asdf fdsa",
      "duration": 3
    },
    {
      "title": "handles asdf q[w]er fdsa",
      "fullTitle": "vim .curWord handles asdf q[w]er fdsa",
      "duration": 7
    },
    {
      "title": "handles asdf [q]wer fdsa",
      "fullTitle": "vim .curWord handles asdf [q]wer fdsa",
      "duration": 6
    },
    {
      "title": "handles words in insert mode",
      "fullTitle": "vim .curWord handles words in insert mode",
      "duration": 1
    },
    {
      "title": "starts in visual",
      "fullTitle": "visual operators starts in visual",
      "duration": 0
    },
    {
      "title": "selects text correctly when moving backwards",
      "fullTitle": "visual operators selects text correctly when moving backwards",
      "duration": 1
    },
    {
      "title": "stores the selection in register 0",
      "fullTitle": "visual operators y stores the selection in register 0",
      "duration": 1
    },
    {
      "title": "deletes the selection",
      "fullTitle": "visual operators d deletes the selection",
      "duration": 1
    },
    {
      "title": "ends up in insert mode",
      "fullTitle": "visual operators c ends up in insert mode",
      "duration": 1
    },
    {
      "title": "indents all the selected lines",
      "fullTitle": "visual operators > indents all the selected lines",
      "duration": 5
    },
    {
      "title": "returns to the beginning of the selection after selecting.",
      "fullTitle": "yank returns to the beginning of the selection after selecting.",
      "duration": 2
    },
    {
      "title": "clears selection",
      "fullTitle": "yank clears selection",
      "duration": 2
    },
    {
      "title": "stores the contents of the line in the register",
      "fullTitle": "yank 0v$y stores the contents of the line in the register",
      "duration": 2
    },
    {
      "title": "stores the contents of the two lines in the register",
      "fullTitle": "yank 0vj$y stores the contents of the two lines in the register",
      "duration": 2
    },
    {
      "title": "grabs an array",
      "fullTitle": "yank yy grabs an array",
      "duration": 1
    }
  ]
}